<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Dev on Записки Турыча</title>
    <link>https://ewok.github.io/tags/dev/</link>
    <description>Recent content in Dev on Записки Турыча</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ru_RU</language>
    <lastBuildDate>Wed, 08 Nov 2017 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://ewok.github.io/tags/dev/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Gotty, share your console!</title>
      <link>https://ewok.github.io/gotty-share-your-console/</link>
      <pubDate>Wed, 08 Nov 2017 00:00:00 +0000</pubDate>
      
      <guid>https://ewok.github.io/gotty-share-your-console/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/yudai/gotty/master/screenshot.gif&#34; alt=&#34;Картинка утащена из репы проекта&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Интересная туловина. Позволяет расшарить любую комманду из консоли через web.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Интересное в сети</title>
      <link>https://ewok.github.io/intieriesnoie-v-sieti/</link>
      <pubDate>Wed, 20 Jan 2016 00:00:00 +0000</pubDate>
      
      <guid>https://ewok.github.io/intieriesnoie-v-sieti/</guid>
      <description>Haskell  Пример работы с VK «Страшные» абстракции Haskell без математики и без кода (почти). Часть I Зоопарк Алгебрaических Типов Данных О прекрасном языке - языком человеческим Argument handling
 Теория категорий для программистов: предисловие
 Категория: суть композиции
 Типы и функции
 Категории, большие и малые
 Категории Клейсли
 Произведения и копроизведения
 Простые алгебраические типы данных   Python Фреймворк умеет алертить об аномалиях в elastic search http://github.</description>
    </item>
    
    <item>
      <title>Vim plugins</title>
      <link>https://ewok.github.io/follow-my-lead/</link>
      <pubDate>Sat, 10 Oct 2015 00:00:00 +0000</pubDate>
      
      <guid>https://ewok.github.io/follow-my-lead/</guid>
      <description>Интересные и полезные плагины
 Follow-my-lead - плагин показывает все сочетания из вашего конфига с клавишей leader Gundo - древовидное UNDO Unite - замена CtrlP и т.д. Быстрый доступ ко всякого рода спискам. Fugitive - это git :) Syntastic - проверка синтаксиса с очень большим списком поддерживаемых форматов Vim-session - управление сессиями. Использую для сохранения состояния проектов. Surround - это без комментариев :) Vimwiki - wiki.  </description>
    </item>
    
    <item>
      <title>Любимые горячие клавишы в pycharm</title>
      <link>https://ewok.github.io/liubimyie-ghoriachiie-klavishy-v-pycharm/</link>
      <pubDate>Mon, 01 Sep 2014 00:00:00 +0000</pubDate>
      
      <guid>https://ewok.github.io/liubimyie-ghoriachiie-klavishy-v-pycharm/</guid>
      <description>New File - Alt+Ins Settings - Ctrl+Alt+S Find Usage - Alt+F7 Select Word - Ctrl+W Quick Definition - Ctrl+Shift+I Quick Documentation - Ctrl+Q Parameters - Ctrl+P  Find
 Class - Ctrl+N Diclaration - Ctrl+B Implementaion - Ctrl+Alt+B Super method - Ctrl+U
 Test - Ctrl+Shift+T
 Bookmark - F11/Ctrl+F11
 Show - Shift+F11
 Structure + Ctrl+F12
 Type + Ctrl+H
 Next Error - F2
 Override method - Ctrl+O</description>
    </item>
    
    <item>
      <title>Интерактивный учебник по vim</title>
      <link>https://ewok.github.io/intieraktivnyi-uchiebnik-po-vim/</link>
      <pubDate>Mon, 09 Jun 2014 00:00:00 +0000</pubDate>
      
      <guid>https://ewok.github.io/intieraktivnyi-uchiebnik-po-vim/</guid>
      <description>Кто давно хотел изучить замечательный редактор vim, но кого останавливал высокий порог вхождения, могут попробовать интерактивный учебник.</description>
    </item>
    
    <item>
      <title>Библиотека sh для python</title>
      <link>https://ewok.github.io/bibliotieka-sh-dlia-python/</link>
      <pubDate>Mon, 05 May 2014 00:00:00 +0000</pubDate>
      
      <guid>https://ewok.github.io/bibliotieka-sh-dlia-python/</guid>
      <description>Классная штука. Позволяет обращаться к командам shell в контексте языка python. Примеры из документации:
from sh import ifconfig print(ifconfig(&amp;quot;wlan0&amp;quot;)) # checkout master branch git.checkout(&amp;quot;master&amp;quot;) # print(the contents of this directory print(ls(&amp;quot;-l&amp;quot;)) # get the longest line of this file longest_line = wc(\_\_file\_\_, &amp;quot;-L&amp;quot;) from sh import git, sudo # resolves to &amp;quot;git branch -v&amp;quot; print(git.branch(&amp;quot;-v&amp;quot;)) print(git(&amp;quot;branch&amp;quot;, &amp;quot;-v&amp;quot;)) # the same command # resolves to &amp;quot;sudo /bin/ls /root&amp;quot; print(sudo.ls(&amp;quot;/root&amp;quot;)) print(sudo(&amp;quot;/bin/ls&amp;quot;, &amp;quot;/root&amp;quot;)) # the same command  Единственное замечание это с вызовами имен файлов по маске.</description>
    </item>
    
    <item>
      <title>TimeComplexity(python)</title>
      <link>https://ewok.github.io/timecomplexitypython/</link>
      <pubDate>Thu, 20 Dec 2012 00:00:00 +0000</pubDate>
      
      <guid>https://ewok.github.io/timecomplexitypython/</guid>
      <description>Шпаргалка
&amp;lsquo;n&amp;rsquo; - количество элементов в контейнере &amp;lsquo;k&amp;rsquo; - значение параметра либо количество элементов в параметре
list(Списки): Operation | Average Case | Amortized Worst Case Copy O(n) O(n) Appednd[1] O(1) O(1) Insert O(n) O(n) Get item O(1) O(1) Set item O(1) O(1) Delete item O(n) O(n) Iteration O(n) O(n) Get slice O(k) O(k) Delete slice O(n) O(n) Set slice O(k + n) O(k + n) Extend[1] O(k) O(k) Sort O(n log n) O(n log n) Multiply O(nk) O(nk) x in s O(n) min(s), max(s) O(n) Get length O(1) O(1)  set(Множества):</description>
    </item>
    
    <item>
      <title>django-filebrowser-no-grappelli &#43; tinymce</title>
      <link>https://ewok.github.io/django-filebrowser-no-grappelli-tinymce/</link>
      <pubDate>Wed, 14 Nov 2012 00:00:00 +0000</pubDate>
      
      <guid>https://ewok.github.io/django-filebrowser-no-grappelli-tinymce/</guid>
      <description>Настройка, уже вполне популярной связки django-filebrowser-no-grappelli + tinymce.
Настройку я производил по инструкции из гугла:
 Урлы: url(r&amp;rsquo;^tinymce/filebrowser/&amp;lsquo;,include(&amp;lsquo;filebrowser.urls&amp;rsquo;)) settings: INSTALLED_APPS = (&amp;hellip;, &amp;lsquo;filebrowser&amp;rsquo;,) FILEBROWSER_DIRECTORY = &amp;lsquo;upload/&amp;rsquo;  Но! Настройка не шла. Оказывается по умолчанию django-filebrowser за основу путей берет MEDIA_ROOT и MEDIA_URL, что вполне логично! А так как я ими не пользовался, все у меня было по STATIC_ROOT и STATIC_URL, то у меня вылазили ошибки.
Нужно указать:
FILEBROWSER_MEDIA_ROOT = STATIC_ROOT FILEBROWSER_MEDIA_URL = STATIC_URL  После чего у меня все заработало как должно.</description>
    </item>
    
    <item>
      <title>Sqlalchemy</title>
      <link>https://ewok.github.io/sqlalchemy/</link>
      <pubDate>Sat, 03 Nov 2012 00:00:00 +0000</pubDate>
      
      <guid>https://ewok.github.io/sqlalchemy/</guid>
      <description>Познакомился с питоновской ORM(Object Relational Mapper) sqlalchemy. Похожа на джанговскую но имеет больше возможностей. Закопался в документацию, читать не перечитать.</description>
    </item>
    
    <item>
      <title>Flask</title>
      <link>https://ewok.github.io/flask/</link>
      <pubDate>Thu, 01 Nov 2012 00:00:00 +0000</pubDate>
      
      <guid>https://ewok.github.io/flask/</guid>
      <description>Flask микро фреймворк написанный на python. Легковесный, на нем я решил написать для себя сайт портфолио. Совмещу изучение фреймворка с полезным делом.</description>
    </item>
    
    <item>
      <title>zip zip</title>
      <link>https://ewok.github.io/zip-zip/</link>
      <pubDate>Sun, 14 Oct 2012 00:00:00 +0000</pubDate>
      
      <guid>https://ewok.github.io/zip-zip/</guid>
      <description>Прикольный пример из книги Лутца(&amp;ldquo;Изучаем Python&amp;rdquo;).
&amp;gt;&amp;gt;&amp;gt; X = (1, 2) &amp;gt;&amp;gt;&amp;gt; Y = (3, 4) &amp;gt;&amp;gt;&amp;gt; A, B = zip(*zip(X, Y)) &amp;gt;&amp;gt;&amp;gt; A (1, 2) &amp;gt;&amp;gt;&amp;gt; B (3, 4)  Распаковываем запакованные кортежи запаковыванием.</description>
    </item>
    
    <item>
      <title>hibernate через pm-utils</title>
      <link>https://ewok.github.io/hibernate-chieriez-pm-utils/</link>
      <pubDate>Wed, 22 Feb 2012 00:00:00 +0000</pubDate>
      
      <guid>https://ewok.github.io/hibernate-chieriez-pm-utils/</guid>
      <description>В русской вики arch в статье о pm-utils там где описывается настройка hibernate, почему то не указано что нужно прописывать hook: resume для в mkinitcpio.
Поэтому у меня в hibernate уходил комп нормально, но не возвращался из него. Рекомендую читать английский вариант статьи там все прописано.
В итоге все выглядит так:
В файл /boot/grub/menu.lst добавляется resume=/path/to/swap/drive
# (0) Arch Linux title Arch Linux root (hd0,0) kernel /vmlinuz26 root=/dev/sda3 resume=/dev/sda2 ro vga=0 initrd /kernel26.</description>
    </item>
    
    <item>
      <title>Экспериментирую с кэшем</title>
      <link>https://ewok.github.io/ekspierimientiruiu-s-keshiem/</link>
      <pubDate>Wed, 15 Feb 2012 00:00:00 +0000</pubDate>
      
      <guid>https://ewok.github.io/ekspierimientiruiu-s-keshiem/</guid>
      <description>Добавил кэширование страниц в блоге. Нагрузки конечно нет никакой, просто ради эксперимента.
Почитать о том как это работает можно здесь:
http://djbook.ru/ch13.html</description>
    </item>
    
    <item>
      <title>Django Aggregation</title>
      <link>https://ewok.github.io/django-aggregation/</link>
      <pubDate>Thu, 19 Jan 2012 00:00:00 +0000</pubDate>
      
      <guid>https://ewok.github.io/django-aggregation/</guid>
      <description>ORM это всегда баланс между производительностью и переносимостью.
Наткнулся на очень интересную тему. Расширение функционала ORM джанги. Изучив материал, переделал и оптимизировал модели блога.
Коротко в примерах.
Есть модель:
class Author(models.Model): name = models.CharField(max_length=100) age = models.IntegerField() friends = models.ManyToManyField(&#39;self&#39;, blank=True) class Publisher(models.Model): name = models.CharField(max_length=300) num_awards = models.IntegerField() class Book(models.Model): isbn = models.CharField(max_length=9) name = models.CharField(max_length=300) pages = models.IntegerField() price = models.DecimalField(max_digits=10, decimal_places=2) rating = models.FloatField() authors = models.ManyToManyField(Author) publisher = models.</description>
    </item>
    
    <item>
      <title>PEP8 коротко и по-русски</title>
      <link>https://ewok.github.io/pep8-korotko-i-po-russki/</link>
      <pubDate>Mon, 16 Jan 2012 00:00:00 +0000</pubDate>
      
      <guid>https://ewok.github.io/pep8-korotko-i-po-russki/</guid>
      <description>Взято отсюда Полезно знать как писать в python стиле:
 используйте 4 пробела для отступа и не используйте табы, не смешивайте их максимальная длина строки 79 символов; для разрыва строки используйте отступы или бэкслеш функции верхнего уровня и определения классов отделяйте двумя пустыми строками определения методов внутри класса отделяйте одной пустой строкой дополнительные пустые строки используйте для логической группировки методов кодировка файлов должна быть Latin-1, а в Питоне 3 и выше - utf-8 каждый импортируемый модуль с новой строки порядок импортов: стандартные модули, third-party модули, локальные модули приложения пустая строка между каждой группой импортов избегайте лишних пробелов внутри скобок; перед запятыми, точкой с запятой и двоеточиями избегайте лишних пробелов перед скобками с аргументами функций и скобками с индексами избегайте больше чем одного пробела между операторами (= - + итд) используйте одиночный пробел для выделения операторов избегайте пробелов вокруг &amp;lsquo;=&amp;rsquo;, который используется для параметров по-умолчанию и keyword аргументов обновляйте комментарии вместе с кодом пишите комментарии по-английски избегайте имён из одиночных l, O, I для модулей и пакетов используйте короткие всестрочные имена для классов используйте СловаНачинаютсяЗаглавными имена для функций используйте слова_с_подчёркиваниями (или смешанныйРегистр если так получилось исторически) для методов используйте слова_с_подчёркиваниями имена для внутренних методов и переменных _подчёркивание_перед_словом для проверки на None используйте is или is not, не используйте операторы сравнения используйте исключения основанные на классах &amp;ndash; наследованные от Exception используйте методы класса string вместо строковых функций используйте &amp;ldquo;.</description>
    </item>
    
  </channel>
</rss>